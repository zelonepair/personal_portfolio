---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href = '/', class: className, ...props } = Astro.props as Props;
const base = import.meta.env.BASE_URL || '/';
const normalizedBase = base === '/' ? '' : base.replace(/\/$/, '');
const isExternal = /^https?:/i.test(href) || href.startsWith('mailto:') || href.startsWith('#');
const stripSlashes = (value = '') => value.replace(/^\/+|\/+$/g, '');
const computedHref = isExternal
	? href
	: href === '/'
		? normalizedBase ? `${normalizedBase}/` : '/'
		: `${normalizedBase}${href.startsWith('/') ? href : `/${href}`}`;
const currentPath = stripSlashes(
	normalizedBase && Astro.url.pathname.startsWith(normalizedBase)
		? Astro.url.pathname.slice(normalizedBase.length)
		: Astro.url.pathname,
);
const linkPath = isExternal ? '' : stripSlashes(href);
const isActive =
	!isExternal && (currentPath === linkPath || (linkPath && currentPath.startsWith(`${linkPath}/`)));
---

<a href={computedHref} class:list={[className, { active: isActive }]} {...props}>
	<slot />
</a>
<style>
	a {
		display: inline-flex;
		gap: 0.25rem;
		align-items: center;
		text-decoration: none;
	}
	a.active {
		font-weight: 600;
		text-decoration: underline;
	}
</style>
